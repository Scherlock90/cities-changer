{"version":3,"sources":["AnotherWayComponent.js","serviceWorker.js","AppHooks.js","index.js"],"names":["React","Component","Boolean","window","location","hostname","match","ChildComponent","props","console","log","activeCity","citiesProps","cities","map","cit","i","react_default","a","createElement","key","nameCity","children","ReactDOM","render","_useState","useState","_useState2","Object","slicedToArray","_useState3","_useState4","setActiveCity","className","class","onClick","e","len","length","Math","floor","random","randomCities","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+NAGiCA,IAAMC,UCSnBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,sEChBN,SAASC,EAAgBC,GACrBC,QAAQC,IAAIF,EAAMG,YAClB,IAAIC,EAAcJ,EAAMK,OAAOC,IAAI,SAACC,EAAKC,GACrC,OACIC,EAAAC,EAAAC,cAAA,OAAKC,IAAKJ,GACLD,EAAIM,YAIjB,OACIJ,EAAAC,EAAAC,cAAA,OAAKC,IAAKZ,EAAMG,YACXC,EAAYJ,EAAMG,YAClBH,EAAMc,UCPnBC,IAASC,OAAOP,EAAAC,EAAAC,cDYD,WAAqB,IAAAM,EACJC,mBAAS,CACjC,CACIL,SAAU,aAEd,CACIA,SAAU,UAEd,CACIA,SAAU,oBATcM,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACzBZ,EADyBc,EAAA,GAAAG,GAAAH,EAAA,GAYID,mBAAS,IAZbK,EAAAH,OAAAC,EAAA,EAAAD,CAAAE,EAAA,GAYzBnB,EAZyBoB,EAAA,GAYbC,EAZaD,EAAA,GAoBhC,OADAtB,QAAQC,IAAIG,EAAOF,GAAYU,UAE3BJ,EAAAC,EAAAC,cAAA,OAAKc,UAAU,mBACXhB,EAAAC,EAAAC,cAAA,OAAKc,UAAU,aACXhB,EAAAC,EAAAC,cAAA,OAAKc,UAAU,aAAab,IAAKT,GAC5BE,EAAOF,GAAYU,UAExBJ,EAAAC,EAAAC,cAAA,OAAKc,UAAU,eACXhB,EAAAC,EAAAC,cAAA,KAAGe,MAAM,8CAA8CC,QAAS,SAAAC,GAAC,OAbjF,SAAuBzB,GACnB,IAAI0B,EAAMxB,EAAOyB,OAEjB,OADAN,EAAcO,KAAKC,MAAMD,KAAKE,SAAWJ,IAClC1B,EAU0E+B,CAAaN,KAAlF,kBAEJnB,EAAAC,EAAAC,cAAA,OAAKc,UAAU,eACXhB,EAAAC,EAAAC,cAACZ,EAAD,CAAgBM,OAAQA,EAAQF,WAAYA,QC1ChD,MAAcgC,SAASC,eAAe,SF0HhD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.1f08980d.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\n\r\nexport default class App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      cities: [\r\n        {\r\n          id: 0,\r\n          nameCity: ''\r\n        },\r\n        {\r\n          id: 1,\r\n          nameCity: 'Kielce'\r\n        },\r\n        {\r\n          id: 2,\r\n          nameCity: 'Rzeszów'\r\n        },\r\n        {\r\n          id: 3,\r\n          nameCity: 'Białystok'\r\n        }\r\n      ]\r\n    };\r\n  }\r\n\r\n  onCitiesHandler = (e) => {\r\n    e.preventDefault();\r\n    let idCities = this.state.cities.map(( id, i) => (\r\n      <ul key={i}>\r\n          {id.nameCity}\r\n      </ul>));\r\n    this.setState({\r\n      cities: [\r\n        {\r\n          id: idCities.id,\r\n          nameCity: idCities\r\n        }\r\n      ]\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const cit = this.state.cities.map((city, i) => (\r\n      <ul key={i}>\r\n          {city.nameCity}\r\n      </ul>\r\n    ))\r\n    return (\r\n      <div className=\"containerCities\">\r\n        <div className=\"container\">\r\n          <div className=\"citiesShow\">\r\n           {cit[0]}\r\n          </div>\r\n          <div className=\"citiesShow2\">\r\n              <button onClick={this.onCitiesHandler}>Cities Changer</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React, {useState} from 'react';\r\n\r\nfunction ChildComponent (props) {\r\n    console.log(props.activeCity)\r\n    let citiesProps = props.cities.map((cit, i) => {\r\n        return (\r\n            <div key={i}>\r\n                {cit.nameCity}\r\n            </div>\r\n        )\r\n    })\r\n    return(\r\n        <div key={props.activeCity}>\r\n            {citiesProps[props.activeCity]}\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default function AppHooks () {\r\n    const [cities, setCities] = useState([\r\n        {\r\n            nameCity: 'Kraków'\r\n        },\r\n        {\r\n            nameCity: \"Kielce\"\r\n        },\r\n        {\r\n            nameCity: \"Białystok\"\r\n        }\r\n    ])\r\n    const [activeCity, setActiveCity] = useState(0);\r\n\r\n    function randomCities (activeCity) {\r\n        let len = cities.length;\r\n        setActiveCity(Math.floor(Math.random() * len))\r\n        return activeCity\r\n    }\r\n    console.log(cities[activeCity].nameCity);\r\n    return(\r\n        <div className=\"containerCities\">\r\n            <div className=\"container\">\r\n                <div className=\"citiesShow\" key={activeCity}>\r\n                    {cities[activeCity].nameCity}\r\n                </div>\r\n                <div className=\"citiesShow2\">\r\n                    <a class=\"waves-effect waves-light  lime accent-2 btn\" onClick={e => randomCities(e)}>Random Cities</a>\r\n                </div>\r\n                <div className=\"citiesShow3\">\r\n                    <ChildComponent cities={cities} activeCity={activeCity} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './AnotherWayComponent';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport AppHooks from './AppHooks';\r\n\r\nReactDOM.render(<AppHooks />, document.getElementById('root'));\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}