{"version":3,"sources":["serviceWorker.js","AppHooks.js","index.js"],"names":["Boolean","window","location","hostname","match","ChildComponent","props","_useState","useState","cities","_useState2","Object","slicedToArray","propCities","useEffect","console","log","activeCity","nameCity","react_default","a","createElement","key","ReactDOM","render","_useState3","_useState4","_useState5","_useState6","setActiveCity","className","onClick","e","len","length","Math","floor","random","randomCities","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qNAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,4ECfN,SAASC,EAAgBC,GAAO,IAAAC,EACQC,mBAASF,EAAMG,QADvBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAJ,EAAA,GACrBM,EADqBH,EAAA,GAAAA,EAAA,GAc5B,OAXAI,oBAAU,WAQV,OALAC,QAAQC,IAAI,WAAaH,EAAWP,EAAMW,YAAYC,UAK/C,kBAAMH,QAAQC,IAAI,oBAIrBG,EAAAC,EAAAC,cAAA,OAAKC,IAAKhB,EAAMW,YACXJ,EAAWP,EAAMW,YAAYC,UCb1CK,IAASC,OAAOL,EAAAC,EAAAC,cDkBD,WAAqB,IAAAI,EACJjB,mBAAS,CACjC,CACIU,SAAU,aAEd,CACIA,SAAU,UAEd,CACIA,SAAU,kBAEd,CACIA,SAAU,gBAEd,CACIA,SAAU,eAEd,CACIA,SAAU,iBAlBcQ,EAAAf,OAAAC,EAAA,EAAAD,CAAAc,EAAA,GACzBhB,EADyBiB,EAAA,GAAAC,GAAAD,EAAA,GAqBIlB,mBAAS,IArBboB,EAAAjB,OAAAC,EAAA,EAAAD,CAAAgB,EAAA,GAqBzBV,EArByBW,EAAA,GAqBbC,EArBaD,EAAA,GA6BhC,OADAb,QAAQC,IAAIP,EAAOQ,GAAYC,UAE3BC,EAAAC,EAAAC,cAAA,OAAKS,UAAU,mBACXX,EAAAC,EAAAC,cAAA,OAAKS,UAAU,aACXX,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKS,UAAU,kBAAkBR,IAAKL,GACjCR,EAAOQ,GAAYC,UAExBC,EAAAC,EAAAC,cAAA,OAAKS,UAAU,OACfX,EAAAC,EAAAC,cAAA,OAAKS,UAAU,oBACXX,EAAAC,EAAAC,cAAA,KAAGS,UAAU,8CAA8CC,QAAS,SAAAC,GAAC,OAfzF,SAAuBf,GACnB,IAAIgB,EAAMxB,EAAOyB,OAEjB,OADAL,EAAcM,KAAKC,MAAMD,KAAKE,SAAWJ,IAClChB,EAYkFqB,CAAaN,KAAtF,kBAEJb,EAAAC,EAAAC,cAAA,OAAKS,UAAU,OACfX,EAAAC,EAAAC,cAAA,OAAKS,UAAU,oBACXX,EAAAC,EAAAC,cAAChB,EAAD,CAAgBI,OAAQA,EAAQQ,WAAYA,KAEhDE,EAAAC,EAAAC,cAAA,OAAKS,UAAU,WC9DnB,MAAcS,SAASC,eAAe,SF2HhD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.844a673d.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, {useState, useEffect} from 'react';\r\nimport './App.css';\r\n\r\nfunction ChildComponent (props) {\r\n    const [propCities, setPropCities] = useState(props.cities)\r\n\r\n    useEffect(() => {\r\n      // This gets called after every render, by default\r\n    // (the first one, and every one after that)\r\n    console.log('render! ' + propCities[props.activeCity].nameCity);\r\n\r\n    // If you want to implement componentWillUnmount,\r\n    // return a function from here, and React will call\r\n    // it prior to unmounting.\r\n    return () => console.log('unmounting...');\r\n    })\r\n\r\n    return(\r\n        <div key={props.activeCity} >\r\n            {propCities[props.activeCity].nameCity}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default function AppHooks () {\r\n    const [cities, setCities] = useState([\r\n        {\r\n            nameCity: 'Kraków'\r\n        },\r\n        {\r\n            nameCity: \"Kielce\"\r\n        },\r\n        {\r\n            nameCity: \"Białystok\"\r\n        },\r\n        {\r\n            nameCity: \"Wrocław\"\r\n        },\r\n        {\r\n            nameCity: \"Gdańsk\"\r\n        },\r\n        {\r\n            nameCity: \"Poznań\"\r\n        }\r\n    ])\r\n    const [activeCity, setActiveCity] = useState(0);\r\n\r\n    function randomCities (activeCity) {\r\n        let len = cities.length;\r\n        setActiveCity(Math.floor(Math.random() * len))\r\n        return activeCity\r\n    }\r\n    console.log(cities[activeCity].nameCity);\r\n    return(\r\n        <div className=\"containerCities\">\r\n            <div className=\"container\">\r\n                <div>\r\n                    <div className=\"citiesShow cit1\" key={activeCity}>\r\n                        {cities[activeCity].nameCity}\r\n                    </div>\r\n                    <div className=\"bg\"></div>\r\n                    <div className=\"citiesShow2 cit2\">\r\n                        <a className=\"waves-effect waves-light  lime accent-2 btn\" onClick={e => randomCities(e)}>Random Cities</a>\r\n                    </div>\r\n                    <div className=\"bg\"></div>\r\n                    <div className=\"citiesShow3 cit3\">\r\n                        <ChildComponent cities={cities} activeCity={activeCity} />\r\n                    </div>\r\n                    <div className=\"bg\"></div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n};","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport AppHooks from './AppHooks';\r\n\r\nReactDOM.render(<AppHooks />, document.getElementById('root'));\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}