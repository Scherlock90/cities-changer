{"version":3,"sources":["serviceWorker.js","Footer.js","AppHooks.js","index.js"],"names":["Boolean","window","location","hostname","match","footerStyle","textAlign","color","padding","width","titleStyle","backgroundColor","borderRadius","fontWeight","fontSize","zIndex","position","boxShadow","Footer","react_default","a","createElement","style","href","ChildComponent","props","_useState","useState","cities","_useState2","Object","slicedToArray","propCities","useEffect","console","log","activeCity","nameCity","key","ReactDOM","render","_useState3","_useState4","_useState5","_useState6","setActiveCity","className","onClick","e","len","length","Math","floor","random","randomCities","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qNAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,sEChBAC,SAAc,CAChBC,UAAW,SACXC,MAAO,oBACPC,QAAS,cACTC,MAAO,SAELC,EAAa,CACfD,MAAO,OACPE,gBAAiB,UACjBC,aAAc,KACdC,WAAY,MACZC,SAAU,OACVC,OAAQ,MACRC,SAAU,WACVC,UAAW,sCAGA,SAASC,IACpB,OACIC,EAAAC,EAAAC,cAAA,OAAKC,MAAOjB,GACRc,EAAAC,EAAAC,cAAA,KAAGC,MAAOZ,EAAYa,KAAK,oBAA3B,kBClBZ,SAASC,EAAgBC,GAAO,IAAAC,EACQC,mBAASF,EAAMG,QADvBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAJ,EAAA,GACrBM,EADqBH,EAAA,GAAAA,EAAA,GAQ5B,OALAI,oBAAU,WAEN,OADAC,QAAQC,IAAI,WAAaH,EAAWP,EAAMW,YAAYC,UAC/C,kBAAMH,QAAQC,IAAI,oBAIzBhB,EAAAC,EAAAC,cAAA,OAAKiB,IAAKb,EAAMW,YACXJ,EAAWP,EAAMW,YAAYC,UCR1CE,IAASC,OAAOrB,EAAAC,EAAAC,cDaD,WAAqB,IAAAoB,EACJd,mBAAS,CACjC,CACIU,SAAU,aAEd,CACIA,SAAU,UAEd,CACIA,SAAU,kBAEd,CACIA,SAAU,gBAEd,CACIA,SAAU,eAEd,CACIA,SAAU,iBAlBcK,EAAAZ,OAAAC,EAAA,EAAAD,CAAAW,EAAA,GACzBb,EADyBc,EAAA,GAAAC,GAAAD,EAAA,GAqBIf,mBAAS,IArBbiB,EAAAd,OAAAC,EAAA,EAAAD,CAAAa,EAAA,GAqBzBP,EArByBQ,EAAA,GAqBbC,EArBaD,EAAA,GA6BhC,OADAV,QAAQC,IAAIP,EAAOQ,GAAYC,UAE3BlB,EAAAC,EAAAC,cAAA,OAAKyB,UAAU,mBACX3B,EAAAC,EAAAC,cAAA,OAAKyB,UAAU,aACX3B,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKyB,UAAU,kBAAkBR,IAAKF,GACjCR,EAAOQ,GAAYC,UAExBlB,EAAAC,EAAAC,cAAA,OAAKyB,UAAU,OACf3B,EAAAC,EAAAC,cAAA,OAAKyB,UAAU,oBACX3B,EAAAC,EAAAC,cAAA,KAAGyB,UAAU,8CAA8CC,QAAS,SAAAC,GAAC,OAfzF,SAAuBZ,GACnB,IAAIa,EAAMrB,EAAOsB,OAEjB,OADAL,EAAcM,KAAKC,MAAMD,KAAKE,SAAWJ,IAClCb,EAYkFkB,CAAaN,KAAtF,kBAEJ7B,EAAAC,EAAAC,cAAA,OAAKyB,UAAU,OACf3B,EAAAC,EAAAC,cAAA,OAAKyB,UAAU,oBACX3B,EAAAC,EAAAC,cAACG,EAAD,CAAgBI,OAAQA,EAAQQ,WAAYA,KAEhDjB,EAAAC,EAAAC,cAAA,OAAKyB,UAAU,OACf3B,EAAAC,EAAAC,cAACH,EAAD,UC1DJ,MAAcqC,SAASC,eAAe,SH2HhD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.b44ed714.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\n\r\nconst footerStyle = {\r\n    textAlign: 'center',\r\n    color: 'rgb(21, 101, 192)',\r\n    padding: '2em 0 2em 0',\r\n    width: 'auto'\r\n}\r\nconst titleStyle = {\r\n    width: 'auto',\r\n    backgroundColor: '#c6ff00',\r\n    borderRadius: '5%',\r\n    fontWeight: '600',\r\n    fontSize: '20px',\r\n    zIndex: '100',\r\n    position: 'relative',\r\n    boxShadow: '-10px 25px 50px rgba(0, 0,0, 10.2)'\r\n}\r\n\r\nexport default function Footer () {\r\n    return (\r\n        <div style={footerStyle}>\r\n            <a style={titleStyle} href=\"http://senjs.eu/\"> Designed SeN</a> \r\n        </div>\r\n    )\r\n}","import React, {useState, useEffect} from 'react';\r\nimport './main.css';\r\nimport Footer from './Footer';\r\n\r\nfunction ChildComponent (props) {\r\n    const [propCities, setPropCities] = useState(props.cities)\r\n\r\n    useEffect(() => {\r\n        console.log('render! ' + propCities[props.activeCity].nameCity);\r\n        return () => console.log('unmounting...');\r\n    })\r\n\r\n    return(\r\n        <div key={props.activeCity} >\r\n            {propCities[props.activeCity].nameCity}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default function AppHooks () {\r\n    const [cities, setCities] = useState([\r\n        {\r\n            nameCity: 'Kraków'\r\n        },\r\n        {\r\n            nameCity: \"Kielce\"\r\n        },\r\n        {\r\n            nameCity: \"Białystok\"\r\n        },\r\n        {\r\n            nameCity: \"Wrocław\"\r\n        },\r\n        {\r\n            nameCity: \"Gdańsk\"\r\n        },\r\n        {\r\n            nameCity: \"Poznań\"\r\n        }\r\n    ])\r\n    const [activeCity, setActiveCity] = useState(0);\r\n\r\n    function randomCities (activeCity) {\r\n        let len = cities.length;\r\n        setActiveCity(Math.floor(Math.random() * len))\r\n        return activeCity\r\n    }\r\n    console.log(cities[activeCity].nameCity);\r\n    return(\r\n        <div className=\"containerCities\">\r\n            <div className=\"container\">\r\n                <div>\r\n                    <div className=\"citiesShow cit1\" key={activeCity}>\r\n                        {cities[activeCity].nameCity}\r\n                    </div>\r\n                    <div className=\"bg\"></div>\r\n                    <div className=\"citiesShow2 cit2\">\r\n                        <a className=\"waves-effect waves-light  lime accent-2 btn\" onClick={e => randomCities(e)}>Random Cities</a>\r\n                    </div>\r\n                    <div className=\"bg\"></div>\r\n                    <div className=\"citiesShow3 cit3\">\r\n                        <ChildComponent cities={cities} activeCity={activeCity} />\r\n                    </div>\r\n                    <div className=\"bg\"></div>\r\n                    <Footer />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport AppHooks from './AppHooks';\r\n\r\nReactDOM.render(<AppHooks />, document.getElementById('root'));\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}